version: "3.6"
services:

  proxy:
    image: elia/proxy
    build:
      context: ./services/proxy
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - target: 80
        published: 80
        mode: host
      # Listen on port 443, default for HTTPS
      - target: 443
        published: 443
        mode: host
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - ./services/proxy/letsencrypt:/letsencrypt
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      #- --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Create an entrypoint "http" listening on address 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on address 80
      - --entrypoints.https.address=:443
      # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
      - --certificatesresolvers.le.acme.email=${EMAIL:-adrihanu@gmail.com}
      # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      # Use the TLS Challenge for Let's Encrypt
      - --certificatesresolvers.le.acme.tlschallenge=true
      # Enable the access log, with HTTP requests
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
          # Make the traefik service run only on the node with this label
          # as the node with it has the volume for the certificates
          #- node.labels.traefik-public.traefik-public-certificates == true
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        # Uses routes
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`proxy.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`proxy.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
        # Use the special Traefik service api@internal with the web UI/Dashboard
        #- traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.service=api@internal
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=8080
        # Create middleware with HTTP Basic auth
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME:-admin}:${HASHED_PASSWORD:-$$apr1$$mMyh0WL5$$.pb/8hzHW9DKoa/zzsWnD.}
        # Create middleware to redirect www and to redirect HTTP to HTTPS
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
        # Use middlewares
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect,admin-auth
        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect

  backend:
    image: elia/backend #'${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./services/backend
      args:
        BACKEND_ENV: ${BACKEND_ENV-production}
    volumes:
      - ./services/backend/public/:/app/public
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    env_file:
      - .env
    environment:
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
      - MESSAGE_BROKER_DEFAULT_USER=${MESSAGE_BROKER_DEFAULT_USER}
      - MESSAGE_BROKER_DEFAULT_PASS=${MESSAGE_BROKER_DEFAULT_PASS}
      - BACKEND_ENV=${BACKEND_ENV}
      - MESSAGE_BROKER_HOST=message-broker
      - ELIA_ALGORITHMS_URL=http://algorithms:5000
      - ELIA_BLOCKCHAIN_URL=http://blockchain:3000
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/socket.io`))
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`${DOMAIN?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/socket.io`))
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

  frontend:
    image: elia/frontend #'${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    env_file:
      - .env
    build:
      context: ./services/frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
        BACKEND_URL: https://${DOMAIN?Variable not set}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=Host(`${DOMAIN?Variable not set}`) && (Path(`/`) || PathPrefix(`/`) && PathPrefix(`/{api:([^a]|a[^p]|ap[^i])}`) && PathPrefix(`/{api:([^d]|d[^o]|do[^c]|doc[^s])}`) && PathPrefix(`/{socket:([^s]|s[^o]|so[^c]|soc[^k]|sock[^e]|socke[^t])}`))
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.rule=Host(`${DOMAIN?Variable not set}`) && (Path(`/`) || PathPrefix(`/`) && PathPrefix(`/{api:([^a]|a[^p]|ap[^i])}`) && PathPrefix(`/{api:([^d]|d[^o]|do[^c]|doc[^s])}`) && PathPrefix(`/{socket:([^s]|s[^o]|so[^c]|soc[^k]|sock[^e]|socke[^t])}`))
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

  search-engine:
    image: elia/search-engine
    build:
      context: ./services/search-engine
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      #- discovery.seed_hosts=es02,es03
      #- cluster.initial_master_nodes=es01
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - search-engine-data:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.search-engine-data == true

  search-engine-interface:
    image: elia/search-engine-interface
    build:
      context: ./services/search-engine-interface
    environment:
      ELASTICSEARCH_URL: http://search-engine:9200
      ELASTICSEARCH_HOSTS: http://search-engine:9200
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-http.rule=Host(`search-engine-interface.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-https.middlewares=admin-auth
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-https.rule=Host(`search-engine-interface.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-https.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-search-engine-interface-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-search-engine-interface.loadbalancer.server.port=5601

  database:
    image: elia/database
    build:
      context: ./services/database 
    volumes:
      - database-data:/data/db
    env_file:
      - .env

    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.database-data == true

  database-interface:
    image: elia/database-interface
    build:
      context: ./services/database-interface 
      args:
        BACKEND_ENV: ${BACKEND_ENV-production}
    restart: unless-stopped
    env_file:
      - .env
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        - traefik.http.routers.${STACK_NAME?Variable not set}-database-interface-http.rule=Host(`database-interface.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-database-interface-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME?Variable not set}-database-interface-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
        - traefik.http.routers.${STACK_NAME?Variable not set}-database-interface-https.rule=Host(`database-interface.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-database-interface-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-database-interface-https.tls=true
        - traefik.http.routers.${STACK_NAME?Variable not set}-database-interface-https.tls.certresolver=le
        - traefik.http.services.${STACK_NAME?Variable not set}-database-interface.loadbalancer.server.port=8081

  message-broker:
    image: elia/message-broker
    build:
      context: ./services/message-broker 
    ports:
      - '4369:4369'
      - '5672:5672'
      - '25672:25672'
      - '15672:15672'
    volumes:
      - 'message-broker-data:/bitnami'

    environment:
        RABBITMQ_DEFAULT_USER: ${MESSAGE_BROKER_DEFAULT_USER}
        RABBITMQ_DEFAULT_PASS: ${MESSAGE_BROKER_DEFAULT_PASS}

  task-executor:
    image: elia/task-executor
    build:
      context: ./services/task-executor
      args:
        BACKEND_ENV: ${BACKEND_ENV-production}
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    env_file:
      - .env
    environment:
        MESSAGE_BROKER_DEFAULT_USER: ${MESSAGE_BROKER_DEFAULT_USER}
        MESSAGE_BROKER_DEFAULT_PASS: ${MESSAGE_BROKER_DEFAULT_PASS}
        MESSAGE_BROKER_HOST: message-broker
        BACKEND_URL: http://backend/api/v1
        ELIA_ALGORITHMS_URL: http://algorithms:5000

volumes:
  database-data:
  search-engine-data:
    driver: local
  message-broker-data:
    driver: local

networks:
  traefik-public:
    external: true 
